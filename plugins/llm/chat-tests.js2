

component('mergeBy', {
  params: [
    { id: 'source1', as: 'array', mandatory: true },
    { id: 'source2', as: 'array', mandatory: true },
    { id: 'on', as: 'string', mandatory: true },
    { id: 'fields', as: 'array', mandatory: true }
  ],
  impl: (ctx, source1, source2, on, fields) => {
    const mergedData = source1.flatMap(item1 => {
      return source2
        .filter(item2 => item1[on] === item2[on])
        .map(item2 => {
          const result = {};
          fields.forEach(field => {
            const [source, fieldName] = field.split('.');
            result[fieldName] = (source === 'source1' ? item1 : item2)[fieldName];
          });
          return result;
        });
    });
    return mergedData;
  }
})

component('testMergeBy', {
  impl: dataTest({
    calculate: mergeBy({
      source1: asIs([
        { id: 1, name: "Homer Simpson" },
        { id: 2, name: "Marge Simpson" }
      ]),
      source2: asIs([
        { id: 1, friend: "Barnie" },
        { id: 2, friend: "Ned Flanders" }
      ]),
      on: 'id',
      fields: list('source1.name', 'source2.friend')
    }),
    expectedResult: equals(asIs([
      { name: "Homer Simpson", friend: "Barnie" },
      { name: "Marge Simpson", friend: "Ned Flanders" }
    ]))
  })
})

component('dataTest.complexJsonManipulation', {
  impl: dataTest({
    calculate: pipeline(
      asIs({
        employees: [
          { id: 1, name: "Homer Simpson", department: "Safety", salary: 40000 },
          { id: 2, name: "Marge Simpson", department: "Finance", salary: 45000 },
          { id: 3, name: "Bart Simpson", department: "Safety", salary: 30000 },
          { id: 4, name: "Lisa Simpson", department: "IT", salary: 50000 },
          { id: 5, name: "Maggie Simpson", department: "IT", salary: 35000 }
        ],
        departments: [
          { id: "Safety", manager: "Homer Simpson" },
          { id: "Finance", manager: "Marge Simpson" },
          { id: "IT", manager: "Lisa Simpson" }
        ]
      }),
      obj(
        prop('totalSalaryByDepartment', groupBy({
          items: '%employees%',
          key: '%department%',
          aggregate: sum('%salary%')
        })),
        prop('employeesWithIncreasedSalary', pipeline(
          '%employees%',
          filter('%salary% < 40000'),
          map(obj(
            prop('id', '%id%'),
            prop('name', '%name%'),
            prop('department', '%department%'),
            prop('salary', (ctx, item) => item.salary + 5000)
          ))
        )),
        prop('departmentManagers', mergeBy({
          source1: '%departments%',
          source2: '%employees%',
          on: 'id',
          fields: list('source1.id', 'source2.name')
        }))
      )
    ),
    expectedResult: equals(asIs({
      totalSalaryByDepartment: {
        Safety: 70000,
        Finance: 45000,
        IT: 85000
      },
      employeesWithIncreasedSalary: [
        { id: 3, name: "Bart Simpson", department: "Safety", salary: 35000 },
        { id: 5, name: "Maggie Simpson", department: "IT", salary: 40000 }
      ],
      departmentManagers: [
        { id: "Safety", name: "Homer Simpson" },
        { id: "Finance", name: "Marge Simpson" },
        { id: "IT", name: "Lisa Simpson" }
      ]
    }))
  })
})