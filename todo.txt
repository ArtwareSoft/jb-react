refactor
  unify tests - jbmTest.cmd*
  watchRef - second param byName
  fix tgp-upgrade in nodejs
  langServerice dsl - completion, definition, calcEditAndGotoPos(completionItem), applyEditAndGoto(editItem), shiftArrayItem
  unify contains, equal, endsWith, startsWith - %% - allText, text -> data, maybe 'data' param by name can be standard!!

tgpModel
  tgpModel for prettyPrint and tgpLang
  interface based on json
    paramsOfComp(cmpId,{sourceCode})
    typeOfComp(cmpId,{sourceCode})
    ptsOfType(type<dsl>, {sourceCode, topPlugin})
    plugins({sourceCode})
      [{ id, dependentPlugins, symbols }]
    dsls({sourceCode})
    typesOfDsl(dsl,{sourceCode})

  paramDef(profileText, path, plugin) - not a model but specific profile !!!
    this is the hard part because we do not have the symbols for the plugin


use chatgpt to plan a view of a context for a specific need and target audience.
use rules

use chatgpt to generate python and tgp wrapper
external lib version, add version to using and pluginDsl - find use case with external lib

go over UIFrontEndTest and try to make it uiTest
load plugin dynamically in probeTest
ctrl-I
  add plugin and file info about 'using' and 'dsl' indication for current plugin
add plugin dependencies chart with code side and #components

controlWithFeatures - use ctx params in features
vdom diff bug!!!
 uiTest.tableTreeUnexpandRefresh.vdom
vscode
  preview mode - 
    two phase - calc the circuit and run preview on the circuit
  tgpTextEditor.probeByDocProps => tgpTextEditor.probeOrPreviewByDocProps
    params: previewMode, preferedCircuit

tests to fix
  uiTest.editableText.richPicklistHelper.setInput
  remoteWidgetTest.runInBECmpContext

remote logs should be added to log in general (in cmd)
  how to merge?
    1. just add a new log line starting with 'source:xx 
  remote errors should be added to current log
add logs to ctrl-I
  log selection defaults and DSL
add circuit selection to ctrl-I
add disabled (like remark)


- nested tests - pattern=remote|worker|jbm|pattern|distributed
- implement private comps - jb.component has plugin. jb.run will try jb.utils.getPlugin(profile).comps[fullId] || jb.comps[fullId],
jb.exec({$: 'mukki', $plugin: 'studio' })
idea: { $: 'button', $plugin :'ui@5.2' at the json } allow multiple version simulatinously for conversion

plugins
  dist directory - check to move it to plugins/xx/external


zui gridView
  build manual test
  calc relative zoom and center
  integrate layout
  present elems
  lazy elem preparation
zui BE-FE
  rewrite itemlist to separate FE and BE features
    each view may need help beacuse of the props


R 
  vector (col)
  array(dimentions)
  list (hetrogenic)
  dataFrame (table, list of same size vectors + list of strings (col names) )

passing vars to worker jbm

logViews
  code loading
  remote data, flow
  ui flows
  ui rendering
  data mapping
  vdom data mapping

vscode plugin
  ctrl-alt-D - debug info
  ctrl-up in array
  obj-prop scenario
  var scenario
  boolean value should suggest - true, false
  no paran if no params - e.g. itemlist.ulLi

html extraction
  UI styles extraction
  data extraction

dsls
  applicationFrame
  flow
  vega
  scene3
  dataAnalysis
  ui
    ui.frame
    ui.doc
    ui.tree (node type)
    ui.form
    ui.dialog ?
    ui.3d
    ui.chart
    ui.animation
    ui.search

  ui.inplaceEditor
    ui.textEditor
      syntax, highlight, completion
    ui.PropertiesEditor
      scriptTree, scriptTreeEditor, node, property, operation, 
  
  datatypes dsl
    structure (doc)
    relational
    column
  mapping dsls
    template
  parsing dsls
    yacc/lex
    extract
  structure editor dsl
  text editor dsl
  structure browser dsl
  studio dsl - script, preview, context
  tgp-writable
      scriptTree, scriptTreeEditor, node  
  db watchable data

improve the type system
  support data types for pipelines
  
frameworks
  tests
    products
      testsRunner
      singleTestRunner
    plugins
      tests
      templates
    common
      dataTest
      actionTest
  studio
    products
      preview
      inPlaceEditor
      inteliScript
    building-blocks
    templates
    plugins - not well designed
      commands
      menuOptions
      toolbarElements
  probe
    products
      runCircuit
      IO
    building-blocks - 0
    templates - 0
    plugins
      handleGaps
  
  remote
    dependencies - data-action,rx
    plugins
      jbm
    common
  rx - library
    contributes-tests
    contributes-UI
      itemlistFeature - itemlist.incrementalFromRx
    contributes-studio
      inteliView
    abstractions
      callbag
      cbOperator
    common
  ui
    dependencies - data-action/abstractions
    abstractions
      control
      style
      feature
    common
    internal
    misc
      tree
      d3
  data-action
    abstractions data,action
    common
    misc
      parsing


scoped components
  components that can be used only inside other components
all pivots can be defined as scoped
compDef({id: 'aa', type: '', params: [
  param({ })
]})
    



preview => remotemainCircuitPreview

cbLogByPath
  replace with ctx.dataObj - when to initialize???

enrich spy logs with rules
  FE test result
  cb message beautifier
  log UI with bread crums

test=inPlaceEditTest.grid

remote.dispatcher
  multiple data test - nodejs/ multiple nodejs
  multiple tests puppeteer (capabilities match)

data tests with dispatcher
preview of studio in nodejs
preview of vsccode in nodejs

post in 
 https://stackoverflow.com/questions/376373/pretty-printing-xml-with-javascript


