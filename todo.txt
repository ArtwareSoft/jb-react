(sensors; cpufreq-info) | xclip -selection clipboard
top -b -n 1 | xclip -selection clipboard

plugin-package
  fileSymbols()
  fetchFile(path)
  storeFile(path, text)

ide = tgpEditorHost
  openDoc(uri)
  applyEdit()
  getActiveDoc -> uri
  selectRange
  compTextAndCursor
  saveActiveDoc
  getEditedDocs
  closeDoc

  saveCurrentDoc
  saveEditedDocs
  applyEdit(uri,edit)

ide state
  active doc + cursor versus active comp + path
  working docs versus working comps
solution 1
  support multiple editors of the same doc
    inteli is editor of the doc focusing on comp
    doc can also have cached comp objects - and manage the changes in its comps & lifecycle
    preview updates - edit can be both text and comp-op or text only and version + base file crc
    need to have doc versions to let the multiple editors & preview keep sync
  preview should be able to separate in-memory updated code-package from the RT state, in order to re-init, 
    extensions state should be handled differently

how to handle extension state
  profiles - no state (just resolve)
  ctx - natural place for state
  global ctx - extensions should store their state there
  what about objects like rx-subjects?
    all should be json - no objects
  



workspace<ide>
  vscodeWS
  jbStudio
  testWS


studio
  studio/package/plugin/probe(optional - main)?circuit=(optional - by)
  how to define one-word package - settings - package-base, or package-path
  where to load the profiles for the editor - child jbm - same main thread
    floating content from child jbm
  workspace
    add origin to workspace
    separate between origin (plugin-package) and ide (vscode do both)
  studio -> workspace-ui
    jb.langService.tgpModels[packagePath]
    jb.langService - inteliMode
    jb.langService.tgpModels for components content (includeImpl) compStr in cache.
    preview jbm on worker

  studio main
ui-widget
  move all state to widget

build log-mapping dsl
  etl - source operator sinks
    fileSource
    pipeline with table schema in ctx
    extract(fields)
    transformRecord
  PTs
    PT selector - byField ()
    PT { fields: [{id, distributionOfPos}] }
  clean commands

webAssembly
  run first prog
  parse buffer check simd
  string refs
  build log-mapping DSL
  clean log files
  add log

dsl
  support var name without quote
  use secondPAsArray for rx.pipe, rx.flow - replace them all, maybe get rid of sinks
  use secondPAsArray for pipe

icon2
  build tests

tgp parser
  type: struct -> api: detect, calcSize, ctxAtPos(pos) -> path, PT

workspace ui
  select the first item on editabletext helper
  build plugin editor

stateless widget
  rx.loop(FEWidget,BEWidget)
  BEwidget at the ctx: id, cmpCounter, cmps, styles, vdom. 
  fix gardbadge collection
  put FEwidget and the flows on session
  maybe watchable is only for session

jbm.cluster
  stateless jbms 
  handle code changes

inner DSL - formatter & resolver
  define promptTemplate: 
    { id: 'prompt', asIs: true, formatter: {$: 'formatter<>llh.prompt' }, resolver: {$: 'resolver<>llh.prompt' }}
    write the formatter and resolver and get completions
 
aggregators - pipeline effeciency
  allow data interface to be both single and agregator
  by input cardinality - if recieve single return single, gets array returns array.
  write obj-prop as aggregator

workspace.ui
  pluginEditor
    files and tests
    add as vscode view
    save ^s
    fix ^p
    ^p - show plugins, files, comps, tests, filters - down, comps, tests, files
  

llm helper 
  ref to innner doc
  prompt preview
  prompt select example from code
  
  promptDSL using vars & code reference
  

code-watcher 
  create both action and source
preview for uiTest
  no preview sctx - just uiTestPreview, not dependent on probe, maybe dependent on tests
  control<>controlOfUiTest({playUIActions: true})
  top FE from studio.jbm with counter for code changes, set spy, and maybe refresh button
  also top FE from studio.jbm - counter for user req, actually *recording* them
  preview.header (debugger) from previewJbm with counters for errors, new interactive comps, count of jb.ui.cmps, total refresh count
    refresh after user request finished (maybe another user req refreshHeader)
  preview tab in vscode - includes the counters, no need for refresh button, moving out should kill the preview jbm

testPreview
  control<>activatedCodeOfTest()
  count each tgpPath visit
  gather code snippests using codemirror, show counters on the code. use ... to separate snippests, keep call order

ids without ''
  proxies for ids
  parse symbols Var\('(.*)', 
  add symbols from params
  add jb.macro.reservedKeywords = ['if', 'Var', 'switch', 'case', 'to', 'component', 'dsl', 'using', 'fileDsl', 'data' ] block them in params ids
  resolve to to '%$xx%'
  support id.x.y with proxies
  pretty print %$aa% -> aa, '%$id.x.y%' -> id.x.y, %$aa()% -> aa()


jb.ui.unmount - should return promise, not easy

itemlistTest.selection.nthChildSelector
shorten menu names

icon gallery



gpt4 discussions
  zui


ui plugins
  net under remote
  watchable-comps under watchable
  loader under core
  dataFlow?
  data
    flow
      reactive
    watchable
    writable

  tree-shake under core
  watchableCode - maybe under tgp

  vega under ui
  studio under tgp
  tgp-studio
  tgp-vscode

tests
  log which tests use worker or cmd
  try to run tests in parallel
share workers and processes
  http://localhost:8082/hosts/tests/tests.html?pattern=jbm|FETest|remote|net|Server|vega
    
pipeline - allowInnerVars property
  dataTest -> testData
add second parameter array by value

show 10 circuits in ctrl+J

refactor after types
  menu
    refactor names
    refactor menu options like group
  features
    no feature prefix
  jbm -> change dsl to remote, remote jbm. prefix

preview in vscode
  open preview in menu using circuit and probe
  preview sourceCode
  watch components - maybe inside the editor applyChange will have also the op and send it to the preview

plugins inside plugin
  for ui
  test is example for that
  ui--tree
  ui--markdown
  then we make studio a plugin

refactor to new rx dsl
jb.ui.f1 => $ui.f1
prettyPrint -> formatter
different dsls with different colors in vscode


tutorialDB(md)
  threadId
  plugin or dsl
  general (architecture & flows by example)
  usage (examples as tests with explainations)
    item - title,level,covered features (can be calculated and attached)
  exercises
    item - level,
    type - 
      test with missing excpected result
      test with missing feature in the calculate selection
      advanced
        bug fix,can ask for code,spy,log and suggest fix
        new feature, new comp

studio bugs
  tree does not refresh - add tab group
  tree - insert does not refresh need to reopen
  
llm query dsl
  tgp tree dsl,type,pt,props - count relevant training samples at each level (at summary label)
  M/D from the tree to the relevant samples
  button to add training samples (tests + explaination) for each pt and prop
  buttons to run the test example and format it
  enable deletion

  toturial doc
    architecture
      pipeline, data flow, expressions
    very common components
      obj,list,dataTest,equals,contains,join
    more components ...


llm
  add token count and $$cost (using pricing and model)
  add nodejs support

llm document assistant for *items*
  *** it is a very good idea beacuse there are many documents it learned from
  goal: generate qaulity items content. E.g. tutorial
  suggest items types and items structure
  build adaptive studio for generating content for each item type
  content sources
    DB, apis, internet
  content improvement process - working on the template UIs
    content quailty marks
    content quailty cretria
    optinal
      generating content alternatives
      merging quality from the alternatives
    item specific quality measurement
    item specific examples to improve from

llm document assistant for jbart widget tutorial
  top down design - starting from json
  defining target audience
  content depth, length, recursiveness
  importance of each data part for summary
  summary versus details
  shown versus expandable

use widget tutorial to train specialized models
use trained models to be experts in item content generation

calc vars should support promise in pipe
ctrl-D - should disable


references
  when stand on params: [ { id: 'dd' }]
tests
  run tests on node
  unify tests - jbmTest.cmd*

name refactor
  watchRef - second param byName

unify contains, equal, endsWith, startsWith - %% - allText, text -> data, maybe 'data' param by name can be standard!!

chatgpt
  generate css for htmls
  use chatgpt to plan a view of a context for a specific need and target audience.
  use rules

  generate python
  tgp wrapper for libraries
  external lib version, add version to using and pluginDsl - find use case with external lib

load plugin dynamically in probeTest
ctrl-I
  add plugin and file info about 'using' and 'dsl' indication for current plugin
add plugin dependencies chart with code side and #components

controlWithFeatures - use ctx params in features
vdom diff bug!!!
 uiTest.tableTreeUnexpandRefresh.vdom
vscode
  preview mode - 
    two phase - calc the circuit and run preview on the circuit

tests to fix
  uiTest.editableText.richPicklistHelper.setInput
  remoteWidgetTest.runInBECmpContext

remote logs should be added to log in general (in cmd)
  how to merge?
    1. just add a new log line starting with 'source:xx 
  remote errors should be added to current log
add circuit selection to ctrl-I
add disabled (like remark)

- implement private comps - jb.component has plugin. jb.run will try jb.utils.getPlugin(profile).comps[fullId] || jb.comps[fullId],
jb.exec({$: 'mukki', $plugin: 'studio' })
idea: { $: 'button', $plugin :'ui@5.2' at the json } allow multiple version simulatinously for conversion

zui gridView
  build manual test
  calc relative zoom and center
  integrate layout
  present elems
  lazy elem preparation
zui BE-FE
  rewrite itemlist to separate FE and BE features
    each view may need help beacuse of the props


R 
  vector (col)
  array(dimentions)
  list (hetrogenic)
  dataFrame (table, list of same size vectors + list of strings (col names) )

passing vars to worker jbm

logViews
  code loading
  remote data, flow
  ui flows
  ui rendering
  data mapping
  vdom data mapping

vscode plugin
  ctrl-alt-D - debug info
  ctrl-up in array
  obj-prop scenario
  var scenario
  boolean value should suggest - true, false
  no paran if no params - e.g. itemlist.ulLi

html extraction
  UI styles extraction
  data extraction

dsls
  applicationFrame
  flow
  vega
  scene3
  dataAnalysis
  ui
    ui.frame
    ui.doc
    ui.tree (node type)
    ui.form
    ui.dialog ?
    ui.3d
    ui.chart
    ui.animation
    ui.search

  ui.inplaceEditor
    ui.textEditor
      syntax, highlight, completion
    ui.PropertiesEditor
      scriptTree, scriptTreeEditor, node, property, operation, 
  
  datatypes dsl
    structure (doc)
    relational
    column
  mapping dsls
    template
  parsing dsls
    yacc/lex
    extract
  structure editor dsl
  text editor dsl
  structure browser dsl
  studio dsl - script, preview, context
  tgp-writable
      scriptTree, scriptTreeEditor, node  
  db watchable data

improve the type system
  support data types for pipelines
  
frameworks
  tests
    products
      testsRunner
      singleTestRunner
    plugins
      tests
      templates
    common
      dataTest
      actionTest
  studio
    products
      preview
      inPlaceEditor
      inteliScript
    building-blocks
    templates
    plugins - not well designed
      commands
      menuOptions
      toolbarElements
  probe
    products
      runCircuit
      IO
    building-blocks - 0
    templates - 0
    plugins
      handleGaps
  
  remote
    dependencies - data-action,rx
    plugins
      jbm
    common
  rx - library
    contributes-tests
    contributes-UI
      itemlistFeature - itemlist.incrementalFromRx
    contributes-studio
      inteliView
    abstractions
      callbag
      cbOperator
    common
  ui
    dependencies - data-action/abstractions
    abstractions
      control
      style
      feature
    common
    internal
    misc
      tree
      d3
  data-action
    abstractions data,action
    common
    misc
      parsing


scoped components
  components that can be used only inside other components
all pivots can be defined as scoped
compDef({id: 'aa', type: '', params: [
  param({ })
]})
    



preview => remotemainCircuitPreview

cbLogByPath
  replace with ctx.dataObj - when to initialize???

enrich spy logs with rules
  FE test result
  cb message beautifier
  log UI with bread crums

test=inPlaceEditTest.grid

remote.dispatcher
  multiple data test - nodejs/ multiple nodejs
  multiple tests puppeteer (capabilities match)

data tests with dispatcher
preview of studio in nodejs
preview of vsccode in nodejs

post in 
 https://stackoverflow.com/questions/376373/pretty-printing-xml-with-javascript


